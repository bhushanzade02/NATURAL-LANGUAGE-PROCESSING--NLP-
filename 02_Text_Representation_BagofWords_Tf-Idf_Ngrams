{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "458e06cc",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:45.309363Z",
     "iopub.status.busy": "2025-07-02T03:31:45.309065Z",
     "iopub.status.idle": "2025-07-02T03:31:47.019439Z",
     "shell.execute_reply": "2025-07-02T03:31:47.018742Z"
    },
    "papermill": {
     "duration": 1.717002,
     "end_time": "2025-07-02T03:31:47.021062",
     "exception": false,
     "start_time": "2025-07-02T03:31:45.304060",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8adadb1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:47.028946Z",
     "iopub.status.busy": "2025-07-02T03:31:47.028508Z",
     "iopub.status.idle": "2025-07-02T03:31:47.032394Z",
     "shell.execute_reply": "2025-07-02T03:31:47.031818Z"
    },
    "papermill": {
     "duration": 0.009246,
     "end_time": "2025-07-02T03:31:47.033867",
     "exception": false,
     "start_time": "2025-07-02T03:31:47.024621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "67d9b48f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:47.041180Z",
     "iopub.status.busy": "2025-07-02T03:31:47.040935Z",
     "iopub.status.idle": "2025-07-02T03:31:47.047942Z",
     "shell.execute_reply": "2025-07-02T03:31:47.047159Z"
    },
    "papermill": {
     "duration": 0.012102,
     "end_time": "2025-07-02T03:31:47.049335",
     "exception": false,
     "start_time": "2025-07-02T03:31:47.037233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df= pd.DataFrame({'text':['people watch campusx','campusx watch campusx','people write comment','campusx write a comment'],'output':[1,1,0,0]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eb9317e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:47.056817Z",
     "iopub.status.busy": "2025-07-02T03:31:47.056035Z",
     "iopub.status.idle": "2025-07-02T03:31:47.078174Z",
     "shell.execute_reply": "2025-07-02T03:31:47.077242Z"
    },
    "papermill": {
     "duration": 0.027253,
     "end_time": "2025-07-02T03:31:47.079656",
     "exception": false,
     "start_time": "2025-07-02T03:31:47.052403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>output</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>people watch campusx</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>campusx watch campusx</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>people write comment</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>campusx write a comment</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      text  output\n",
       "0     people watch campusx       1\n",
       "1    campusx watch campusx       1\n",
       "2     people write comment       0\n",
       "3  campusx write a comment       0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "12554003",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:47.087763Z",
     "iopub.status.busy": "2025-07-02T03:31:47.087049Z",
     "iopub.status.idle": "2025-07-02T03:31:48.440283Z",
     "shell.execute_reply": "2025-07-02T03:31:48.439344Z"
    },
    "papermill": {
     "duration": 1.358957,
     "end_time": "2025-07-02T03:31:48.442032",
     "exception": false,
     "start_time": "2025-07-02T03:31:47.083075",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "cv = CountVectorizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ceb05e1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:48.451517Z",
     "iopub.status.busy": "2025-07-02T03:31:48.451083Z",
     "iopub.status.idle": "2025-07-02T03:31:48.465897Z",
     "shell.execute_reply": "2025-07-02T03:31:48.465055Z"
    },
    "papermill": {
     "duration": 0.020856,
     "end_time": "2025-07-02T03:31:48.467337",
     "exception": false,
     "start_time": "2025-07-02T03:31:48.446481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "bow = cv.fit_transform(df['text'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3ce1c4f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:48.475898Z",
     "iopub.status.busy": "2025-07-02T03:31:48.475507Z",
     "iopub.status.idle": "2025-07-02T03:31:48.480722Z",
     "shell.execute_reply": "2025-07-02T03:31:48.479782Z"
    },
    "papermill": {
     "duration": 0.011175,
     "end_time": "2025-07-02T03:31:48.482079",
     "exception": false,
     "start_time": "2025-07-02T03:31:48.470904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'people': 2, 'watch': 3, 'campusx': 0, 'write': 4, 'comment': 1}\n"
     ]
    }
   ],
   "source": [
    "# vocab  all unique words  \n",
    "print(cv.vocabulary_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6ab94aa6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:48.490045Z",
     "iopub.status.busy": "2025-07-02T03:31:48.489713Z",
     "iopub.status.idle": "2025-07-02T03:31:48.495720Z",
     "shell.execute_reply": "2025-07-02T03:31:48.494797Z"
    },
    "papermill": {
     "duration": 0.011571,
     "end_time": "2025-07-02T03:31:48.497169",
     "exception": false,
     "start_time": "2025-07-02T03:31:48.485598",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 0 1 1 0]]\n",
      "[[2 0 0 1 0]]\n"
     ]
    }
   ],
   "source": [
    "# converting words into  vector\n",
    "print(bow[0].toarray())\n",
    "print(bow[1].toarray())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d4614ebd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:48.505666Z",
     "iopub.status.busy": "2025-07-02T03:31:48.505301Z",
     "iopub.status.idle": "2025-07-02T03:31:48.511935Z",
     "shell.execute_reply": "2025-07-02T03:31:48.510892Z"
    },
    "papermill": {
     "duration": 0.012668,
     "end_time": "2025-07-02T03:31:48.513616",
     "exception": false,
     "start_time": "2025-07-02T03:31:48.500948",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2, 1, 0, 1, 1]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# FOR EX new statement at prediction time \n",
    "cv.transform([\"campusx watch and write comment of campusx\"]).toarray()\n",
    "# out of voacbulary problem is handling like and "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8c706421",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:48.522152Z",
     "iopub.status.busy": "2025-07-02T03:31:48.521822Z",
     "iopub.status.idle": "2025-07-02T03:31:48.528091Z",
     "shell.execute_reply": "2025-07-02T03:31:48.527067Z"
    },
    "papermill": {
     "duration": 0.012326,
     "end_time": "2025-07-02T03:31:48.529651",
     "exception": false,
     "start_time": "2025-07-02T03:31:48.517325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "cv = CountVectorizer(ngram_range=(3,3))\n",
    "bow = cv.fit_transform(df['text'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e8a72845",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:48.537961Z",
     "iopub.status.busy": "2025-07-02T03:31:48.537657Z",
     "iopub.status.idle": "2025-07-02T03:31:48.542328Z",
     "shell.execute_reply": "2025-07-02T03:31:48.541400Z"
    },
    "papermill": {
     "duration": 0.010552,
     "end_time": "2025-07-02T03:31:48.543776",
     "exception": false,
     "start_time": "2025-07-02T03:31:48.533224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'people watch campusx': 2, 'campusx watch campusx': 0, 'people write comment': 3, 'campusx write comment': 1}\n"
     ]
    }
   ],
   "source": [
    "print(cv.vocabulary_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f4382272",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:48.552152Z",
     "iopub.status.busy": "2025-07-02T03:31:48.551498Z",
     "iopub.status.idle": "2025-07-02T03:31:48.559479Z",
     "shell.execute_reply": "2025-07-02T03:31:48.558650Z"
    },
    "papermill": {
     "duration": 0.013668,
     "end_time": "2025-07-02T03:31:48.560956",
     "exception": false,
     "start_time": "2025-07-02T03:31:48.547288",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>output</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>people watch campusx</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>campusx watch campusx</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>people write comment</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>campusx write a comment</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      text  output\n",
       "0     people watch campusx       1\n",
       "1    campusx watch campusx       1\n",
       "2     people write comment       0\n",
       "3  campusx write a comment       0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d338a26f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:48.569334Z",
     "iopub.status.busy": "2025-07-02T03:31:48.569032Z",
     "iopub.status.idle": "2025-07-02T03:31:48.573158Z",
     "shell.execute_reply": "2025-07-02T03:31:48.572314Z"
    },
    "papermill": {
     "duration": 0.009733,
     "end_time": "2025-07-02T03:31:48.574411",
     "exception": false,
     "start_time": "2025-07-02T03:31:48.564678",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1010bb92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:48.582739Z",
     "iopub.status.busy": "2025-07-02T03:31:48.582250Z",
     "iopub.status.idle": "2025-07-02T03:31:48.599379Z",
     "shell.execute_reply": "2025-07-02T03:31:48.598445Z"
    },
    "papermill": {
     "duration": 0.022851,
     "end_time": "2025-07-02T03:31:48.600843",
     "exception": false,
     "start_time": "2025-07-02T03:31:48.577992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.49681612, 0.        , 0.61366674, 0.61366674, 0.        ],\n",
       "       [0.8508161 , 0.        , 0.        , 0.52546357, 0.        ],\n",
       "       [0.        , 0.57735027, 0.57735027, 0.        , 0.57735027],\n",
       "       [0.49681612, 0.61366674, 0.        , 0.        , 0.61366674]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tfidf = TfidfVectorizer()\n",
    "tfidf.fit_transform(df['text']).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8fcf799e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:48.609522Z",
     "iopub.status.busy": "2025-07-02T03:31:48.608906Z",
     "iopub.status.idle": "2025-07-02T03:31:48.614729Z",
     "shell.execute_reply": "2025-07-02T03:31:48.613741Z"
    },
    "papermill": {
     "duration": 0.011574,
     "end_time": "2025-07-02T03:31:48.616147",
     "exception": false,
     "start_time": "2025-07-02T03:31:48.604573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.22314355 1.51082562 1.51082562 1.51082562 1.51082562]\n",
      "['campusx' 'comment' 'people' 'watch' 'write']\n"
     ]
    }
   ],
   "source": [
    "print(tfidf.idf_)\n",
    "print(tfidf.get_feature_names_out())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c0bd8b88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-02T03:31:48.625424Z",
     "iopub.status.busy": "2025-07-02T03:31:48.624608Z",
     "iopub.status.idle": "2025-07-02T03:31:48.628353Z",
     "shell.execute_reply": "2025-07-02T03:31:48.627678Z"
    },
    "papermill": {
     "duration": 0.009531,
     "end_time": "2025-07-02T03:31:48.629682",
     "exception": false,
     "start_time": "2025-07-02T03:31:48.620151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#save"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.501589,
   "end_time": "2025-07-02T03:31:49.253644",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-02T03:31:40.752055",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
